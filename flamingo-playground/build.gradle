apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.devtools.ksp'
apply plugin: 'com.mikepenz.aboutlibraries.plugin'

android {
    compileSdkVersion deps.android.build.compileSdkVersion

    defaultConfig {
        minSdkVersion deps.android.build.minSdkVersion
        targetSdkVersion deps.android.build.targetSdkVersion
        versionCode 1
        versionName versions.flamingo
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    kotlinOptions.freeCompilerArgs += [
            "-Xopt-in=com.flamingo.annotations.DelicateFlamingoApi,kotlin.RequiresOptIn",
    ]

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${project.name}-${versions.flamingo}.aar"
        }
    }

    lintOptions {
        checkReleaseBuilds true
        noLines true
        showAll true
        warningsAsErrors false
        abortOnError project.getProperties().getOrDefault("abortOnLintError", true).toBoolean()
        disable 'SystemUiColoringMigration', 'RtlSymmetry', 'RtlEnabled', 'RtlHardcoded',
                'ParcelCreator', "NullSafeMutableLiveData"
        baseline file("lint-baseline.xml")
    }

    sourceSets {
        debug {
            java {
                srcDir 'build/generated/ksp/debug/kotlin'
            }
        }
        release {
            java {
                srcDir 'build/generated/ksp/release/kotlin'
            }
        }
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion versions.compose
    }

    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'

        // MUST be present to remove enormous amount of metadata files (with source code in them)
        // from the build artifact
        exclude '**/com/flamingo/crab/generated/**'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    android {
        testOptions {
            unitTests.all {
                useJUnitPlatform()
            }
        }
    }
}

aboutLibraries {
    additionalLicenses = ['mit', 'unsplash']
    // define the path configuration files are located in. E.g. additional libraries, licenses to add to the target .json
    configPath = "${projectDir}/aboutLibrariesConfig"
    // Define the strict mode, will fail if the project uses licenses not allowed
    strictMode = com.mikepenz.aboutlibraries.plugin.StrictMode.FAIL
    // Allowed set of licenses, this project will be able to use without build failure
    allowedLicenses = ["asdkl", "Apache-2.0", "MIT", "unsplash"]
}

clean {
    delete "${projectDir}/src/main/assets/themes.xml",
            "${projectDir}/src/test/resources/themes.xml"
}
// see /base/flamingo/src/main/res/values/themes.xml for more info
task copyThemesFileIntoAssets(type: Copy) {
    from file("${rootDir}/flamingo/src/main/res/values/themes.xml")
    into file("${projectDir}/src/main/assets/")
}

task copyThemesFileIntoTestAssets(type: Copy) {
    from file("${rootDir}/flamingo/src/main/res/values/themes.xml")
    into file("${projectDir}/src/test/resources/")
}

preBuild.dependsOn(copyThemesFileIntoAssets)
preBuild.dependsOn(copyThemesFileIntoTestAssets)

ksp {
    arg("crab.rootProjectDir", rootProject.projectDir.absolutePath)
    arg("crab.moduleName", project.name)
    arg("crab.demoModule", "yaas")
}

dependencies {
    ksp project(":crab")
    lintPublish project(":flamingo-lint")

    implementation project(':flamingo')
    implementation project(':flamingo-component-demo-api')
    implementation project(':flamingo-roboto-font')
    implementation project(':theater')

    implementation deps.arch.fragmentKtx
    implementation deps.kotlin.stdlib
    implementation deps.kotlin.reflect
    implementation deps.android.support.appCompat
    implementation deps.android.support.constraintLayout
    implementation deps.android.support.material
    implementation deps.android.support.recyclerView
    implementation deps.android.ktx.core
    implementation deps.android.ktx.preference
    implementation deps.kotlin.coroutines.core
    implementation deps.kotlin.coroutines.android
    implementation deps.timber
    implementation deps.coil.coil
    implementation "com.mikepenz:aboutlibraries-core:10.0.0-rc01"
    implementation "com.mikepenz:aboutlibraries-compose:10.0.0-rc01"


    // compose
    implementation deps.compose.ui
    implementation deps.compose.uiTooling
    implementation deps.compose.foundation
    implementation deps.compose.material
    implementation deps.compose.viewmodel
    implementation deps.compose.runtime
    implementation deps.compose.compiler
    implementation deps.compose.accompanistDrawablePainter
    debugImplementation "androidx.customview:customview:1.2.0-alpha01"
    debugImplementation "androidx.customview:customview-poolingcontainer:1.0.0"

    testImplementation deps.truth
    testImplementation deps.junit5.api
    testImplementation deps.junit5.params
    testRuntimeOnly deps.junit5.engine
    androidTestImplementation deps.compose.uiTest
}
